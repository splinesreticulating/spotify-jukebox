# Commit Messages
- Make commit messages brief
- Use point form language
- Start with a verb in present tense (e.g., "Add", "Fix", "Update")
- Reference issue number when applicable
- Keep under 50 characters if possible

# Code Style
- Follow existing patterns in files
- Use functional components for React
- Maintain consistent naming conventions
- Use Tailwind CSS for styling
- Prefer string interpolation with template literals over concatenation
- No semicolons at the end of statements
- Use 120 character line length
- Type all React components and props
- Use named exports for components
- Create separate type files in lib/types
- Use clsx for conditional class names

# Pull Requests
- Keep changes focused on a single concern
- Include tests for new features
- Update documentation when needed

# Database
- Use Prisma for database operations
- Create proper types for Prisma return values
- Keep schema.prisma up to date with all models

# State Management
- Use React Query for server state
- Use React hooks for component state
- Prefer server components where possible

# Deployment
- Deploy using fly.io
- Use multi-stage Docker builds
- Follow Node.js 18+ compatibility
- Use yarn for package management

# Formatting and Linting
- Format with Prettier before committing
- Follow Next.js/Vercel style guide
- Use ESLint for code quality
- Run ts-prune to find unused exports

# Theme System
- Use theme-consistent components
- Follow color naming conventions in tailwind.config.ts 