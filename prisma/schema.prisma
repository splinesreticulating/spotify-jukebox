generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model compatibility_tree {
  id                                      Int  @id @default(autoincrement())
  root_id                                 Int
  branch_id                               Int
  branch_level                            Int?
  nuts_compatibility_tree_branch_idTonuts nuts @relation("compatibility_tree_branch_idTonuts", fields: [branch_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  nuts_compatibility_tree_root_idTonuts   nuts @relation("compatibility_tree_root_idTonuts", fields: [root_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([root_id, branch_id])
  @@index([branch_id], map: "idx_compatibility_tree_branch_id")
  @@index([root_id], map: "idx_compatibility_tree_root_id")
}

model history {
  id        Int      @id @default(autoincrement())
  nut_id    Int
  played_at DateTime @default(now()) @db.Timestamp(6)

  @@index([nut_id], map: "idx_history_nut_id")
  @@index([played_at], map: "idx_played_at")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model nuts {
  id                                                    Int                  @id @default(autoincrement())
  spotify_id                                            String?              @unique @db.Char(22)
  sam_id                                                Int?                 @unique
  youtube_id                                            String?              @db.VarChar(11)
  title                                                 String?              @db.VarChar(150)
  artists                                               String[]
  album                                                 String?              @db.VarChar(150)
  bpm                                                   Int?
  level                                                 Int?
  key                                                   String?              @db.VarChar(3)
  date_added                                            DateTime?            @default(now()) @db.Timestamp(6)
  date_liked                                            DateTime?            @db.Timestamp(6)
  date_played                                           DateTime?            @db.Timestamp(6)
  date_artist_played                                    DateTime?            @db.Timestamp(6)
  date_album_played                                     DateTime?            @db.Timestamp(6)
  date_title_played                                     DateTime?            @db.Timestamp(6)
  image_urls                                            String[]
  file_path                                             String?
  hours_off                                             Int?                 @default(24)
  year                                                  Int?
  tags                                                  String[]
  instrumentalness                                      Int?
  duration                                              Int?
  explicit                                              Boolean?
  danceability                                          Int?
  energy                                                Int?
  liveness                                              Int?
  loudness                                              Int?
  speechiness                                           Int?
  valence                                               Int?
  time_signature                                        Int?
  roboticness                                           Int?                 @default(2)
  count_played                                          Int?                 @default(0)
  compatibility_tree_compatibility_tree_branch_idTonuts compatibility_tree[] @relation("compatibility_tree_branch_idTonuts")
  compatibility_tree_compatibility_tree_root_idTonuts   compatibility_tree[] @relation("compatibility_tree_root_idTonuts")
  queue_items                                           queue[]

  @@index([date_played], map: "idx_date_played")
}

model settings {
  name        String    @id
  value       String
  description String?
  updated_at  DateTime? @default(now()) @db.Timestamp(6)
}

model users {
  id       String  @id @db.VarChar(100)
  email    String  @unique @db.VarChar(256)
  password String  @db.VarChar(100)
  name     String? @db.VarChar(100)
}

model queue {
  id       Int      @id @default(autoincrement())
  nut_id   Int
  added_at DateTime @default(now()) @db.Timestamp(6)
  nut      nuts     @relation(fields: [nut_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([added_at], map: "idx_queue_added_at")
  @@index([nut_id], map: "idx_queue_nut_id")
}

model show_schedule {
  id               Int    @id @default(autoincrement())
  show_name        String
  rules            Json
  level_lock       Int?
  genre_lock       String @default(".*")
  roboticness_lock Int    @default(0)
  year_min         Int    @default(1800)
  year_max         Int    @default(5000)
}
