generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model bad_nuts {
  id                 Int       @id @default(autoincrement())
  reason             String?
  spotify_id         String?   @db.Char(22)
  title              String?   @db.VarChar(150)
  artists            String[]
  album              String?   @db.VarChar(150)
  bpm                Int?
  level              Int?
  key                String?   @db.VarChar(3)
  date_added         DateTime? @default(now()) @db.Timestamp(6)
  date_liked         DateTime? @db.Timestamp(6)
  date_played        DateTime? @db.Timestamp(6)
  date_artist_played DateTime? @db.Timestamp(6)
  date_album_played  DateTime? @db.Timestamp(6)
  date_title_played  DateTime? @db.Timestamp(6)
  image_urls         String[]
  file_path          String?
  hours_off          Int?      @default(24)
  year               Int?
  tags               String[]
  instrumentalness   Int?
  duration           Int?
  explicit           Boolean?
  danceability       Int?
  energy             Int?
  liveness           Int?
  loudness           Int?
  speechiness        Int?
  valence            Int?
  time_signature     Int?
  roboticness        Int?      @default(2)
  count_played       Int?      @default(0)
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model compatibility_tree {
  id                                      Int     @id @default(autoincrement())
  root_id                                 Int
  branch_id                               Int
  root_spotify_id                         String? @db.Char(22)
  branch_spotify_id                       String? @db.Char(22)
  root_title                              String? @db.VarChar(150)
  branch_title                            String? @db.VarChar(150)
  branch_level                            Int?
  nuts_compatibility_tree_branch_idTonuts nuts    @relation("compatibility_tree_branch_idTonuts", fields: [branch_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  nuts_compatibility_tree_root_idTonuts   nuts    @relation("compatibility_tree_root_idTonuts", fields: [root_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([branch_id], map: "idx_compatibility_tree_branch_id")
  @@index([root_id], map: "idx_compatibility_tree_root_id")
}

model history {
  id        Int      @id @default(autoincrement())
  nut_id    Int
  played_at DateTime @default(now()) @db.Timestamp(6)

  @@index([nut_id], map: "idx_history_nut_id")
  @@index([played_at], map: "idx_played_at")
}

/// This table contains check constraints and requires additional setup for migrations. Visit https://pris.ly/d/check-constraints for more info.
model nuts {
  id                                                    Int                  @id @default(autoincrement())
  spotify_id                                            String               @unique @db.Char(22)
  title                                                 String?              @db.VarChar(150)
  artists                                               String[]
  album                                                 String?              @db.VarChar(150)
  bpm                                                   Int?
  level                                                 Int?
  key                                                   String?              @db.VarChar(3)
  date_added                                            DateTime?            @default(now()) @db.Timestamp(6)
  date_liked                                            DateTime?            @db.Timestamp(6)
  date_played                                           DateTime?            @db.Timestamp(6)
  date_artist_played                                    DateTime?            @db.Timestamp(6)
  date_album_played                                     DateTime?            @db.Timestamp(6)
  date_title_played                                     DateTime?            @db.Timestamp(6)
  image_urls                                            String[]
  file_path                                             String?
  hours_off                                             Int?                 @default(24)
  year                                                  Int?
  tags                                                  String[]
  instrumentalness                                      Int?
  duration                                              Int?
  explicit                                              Boolean?
  danceability                                          Int?
  energy                                                Int?
  liveness                                              Int?
  loudness                                              Int?
  speechiness                                           Int?
  valence                                               Int?
  time_signature                                        Int?
  roboticness                                           Int?                 @default(2)
  count_played                                          Int?                 @default(0)
  compatibility_tree_compatibility_tree_branch_idTonuts compatibility_tree[] @relation("compatibility_tree_branch_idTonuts")
  compatibility_tree_compatibility_tree_root_idTonuts   compatibility_tree[] @relation("compatibility_tree_root_idTonuts")

  @@index([date_played], map: "idx_date_played")
}

model settings {
  name        String    @id
  value       String
  description String?
  updated_at  DateTime? @default(now()) @db.Timestamp(6)
}

model users {
  id       String  @id @db.VarChar(100)
  email    String  @unique @db.VarChar(256)
  password String  @db.VarChar(100)
  name     String? @db.VarChar(100)
}
